# -*- coding: utf-8 -*-
"""Handwriiten model mnsit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ibfOmoOn-79I6zPSv24xW1qSefCSEjaI
"""

pip install tensorflow

# 1. Import Necessary Libraries
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import confusion_matrix, accuracy_score

"""**Importing Necessary Libraries:**

 **The code begins by importing the required libraries. These include:**

numpy (imported as np): A popular library for numerical computations in Python.
matplotlib.pyplot (imported as plt): A plotting library for creating visualizations in Python.

seaborn (imported as sns): A data visualization library based on matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics.

tensorflow.keras.datasets: The Keras library's built-in datasets, including the MNIST dataset.

tensorflow.keras.models.Sequential: A linear stack of layers for building neural network models in Keras.

tensorflow.keras.layers.Dense: A fully connected layer in a neural network.
tensorflow.keras.utils.to_categorical: A utility function to convert class vectors to binary class matrices for categorical classification tasks.

sklearn.metrics.confusion_matrix: A function to compute the confusion matrix to evaluate the accuracy of a classification.

sklearn.metrics.accuracy_score: A function to calculate the accuracy of a classification model.
"""

# 2. Load and Preprocess the Data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Flatten the images and normalize pixel values to the range [0, 1]
#x_train = x_train.reshape(x_train.shape[0], -1).astype('float32') / 255
#x_test = x_test.reshape(x_test.shape[0], -1).astype('float32') / 255

# One-hot encode the labels
#y_train = to_categorical(y_train, 10)
#y_test = to_categorical(y_test, 10)

"""**mnist.load_data():**
 This function is part of the Keras library and is used to load the MNIST dataset. The MNIST dataset is a large database of handwritten digits that is commonly used for training various image processing systems.

 this line of code loads the MNIST dataset and unpacks the training and test data into variables x_train, y_train, x_test, and y_test, which can then be used for training and evaluating machine learning models.
"""

plt.figure(figsize = (8,8))
for i in range(9):
  plt.subplot(3,3,i+1)
  plt.imshow(x_train[i])
  plt.title(y_train[i])
  plt.axis('off')

"""the code creates a 3x3 grid of subplots and displays the first 9 training images from the MNIST dataset along with their corresponding labels. This visualization helps in understanding the content of the dataset and verifying that the images and labels are loaded correctly."""

# Flatten the images and normalize pixel values to the range [0, 1]
x_train = x_train.reshape(x_train.shape[0], -1).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], -1).astype('float32') / 255

# One-hot encode the labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

"""these preprocessing steps prepare the MNIST dataset for training a neural network model by flattening the images, normalizing the pixel values, and encoding the labels in a suitable format for classification."""

# 3. Build the MLP Model
model = Sequential([
    Dense(512, activation='relu', input_shape=(784,)),
    Dense(256, activation='relu'),
    Dense(10, activation='softmax')
])

# 4. Compile the Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 5. Train the Model
model.fit(x_train, y_train, epochs=10, batch_size=128, verbose=1)

# 6. Evaluate the Model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")

# 7. Display the Confusion Matrix
predictions = model.predict(x_test)
predictions[0]
y_pred = np.argmax(predictions, axis=1)
y_true = np.argmax(y_test, axis=1)
cm = confusion_matrix(y_true, y_pred)

np.argmax(predictions[0])

y_predicted_labels = [np.argmax(i) for i in predictions]
y_predicted_labels[:5]

# Plot the Confusion Matrix
plt.figure(figsize=(10,8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.show()

import shutil

# Save the model to disk
model.save('mnist_mlp_model.h5')

import os
from tensorflow.keras.models import load_model, save_model

# Save the model
model.save('mnist_mlp_model.h5')

# Specify the destination directory
desktop_path = "C:/Users/akelv/Desktop"

# Check if the directory exists, if not, create it
if not os.path.exists(desktop_path):
    os.makedirs(desktop_path)

# Create the full path to the saved model file
saved_model_path = os.path.join(desktop_path, 'mnist_mlp_model.h5')

# Move the saved model to the desktop
os.replace('mnist_mlp_model.h5', saved_model_path)

# Print the full path to the saved model
print(f"Model saved at: {saved_model_path}")

from tensorflow.keras.models import load_model

# Specify the path to the saved model
model_path = "C:/Users/akelv/Desktop/mnist_mlp_model.h5"

# Load the model
loaded_model = load_model(model_path)

# Now you can use the loaded_model for predictions

loaded_model